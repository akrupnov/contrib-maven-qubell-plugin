package {{package}};

import {{invokerPackage}}.ApiException;
import {{invokerPackage}}.ApiInvoker;
{{#imports}}import {{import}};
{{/imports}}

import java.util.*;
import com.qubell.client.exceptions.*;
import com.qubell.client.ClientConfiguration;

{{#operations}}
public class {{classname}} {
  private ClientConfiguration clientConfiguration;

  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public {{classname}}(ClientConfiguration configuration){
    this.clientConfiguration = configuration;
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }
  

  {{#operation}}
  public {{#returnType}}{{{returnType}}} {{/returnType}}{{^returnType}}void {{/returnType}} {{nickname}} ({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) throws QubellServiceException {
     {{#returnType}}return {{/returnType}}{{nickname}}({{#allParams}}{{paramName}}, {{/allParams}} "application/json");
  }

  public {{#returnType}}{{{returnType}}} {{/returnType}}{{^returnType}}void {{/returnType}} {{nickname}} ({{#allParams}}{{{dataType}}} {{paramName}}, {{/allParams}} String contentType) throws QubellServiceException {
    // create path and map variables
    String path = "{{path}}".replaceAll("\\{format\\}","json"){{#pathParams}}.replaceAll("\\{" + "{{paramName}}" + "\\}", apiInvoker.escapeString({{{paramName}}}.toString())){{/pathParams}};

    // query params
    Map<String, String> queryParams = new HashMap<String, String>();
    Map<String, String> headerParams = new HashMap<String, String>();

    {{#requiredParamCount}}
    // verify required params are set
    if({{/requiredParamCount}}{{#requiredParams}} {{paramName}} == null {{#hasMore}}|| {{/hasMore}}{{/requiredParams}}{{#requiredParamCount}}) {
       throw new InvalidInputException("Required parameters are not provided");
    }
    {{/requiredParamCount}}

    {{#queryParams}}if(!"null".equals(String.valueOf({{paramName}})))
      queryParams.put("{{paramName}}", String.valueOf({{paramName}}));
    {{/queryParams}}

    {{#headerParams}}headerParams.put("{{paramName}}", {{paramName}});
    {{/headerParams}}


    try {
      String response = apiInvoker.invokeAPI(path, "{{httpMethod}}", clientConfiguration, queryParams, {{#bodyParam}}{{bodyParam}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}}, headerParams, contentType);
      if(response != null){
        return {{#returnType}}({{{returnType}}}) ApiInvoker.deserialize(response, "{{returnContainer}}", {{returnBaseType}}.class){{/returnType}};
      }
      else {
        return {{#returnType}}null{{/returnType}};
      }
    } catch (ApiException ex) {
      if(ex.getCode() == 400) {
      	throw new InvalidInputException(ex.getMessage(), ex);
      }else if (ex.getCode() == 401){
        throw new InvalidCredentialsException("API: {{nickname}} - User credentials are invalid", ex);
      } else if (ex.getCode() == 403){
          throw new InsufficientPrivilegesException("API: {{nickname}} - User does not have enough privileges to execute the operation", ex);
      } else if(ex.getCode() == 404){
          throw new ObjectNotFoundException("API: {{nickname}} - Object was not found", ex);
      } else if(ex.getCode() == 409){
          throw new ResourceBusyException("API: {{nickname}} - Resource is busy", ex);
      } else if(ex.getCode() == 500){
          throw new ServiceUnavailableException("API: {{nickname}} - Service is unavailable", ex);
      }

      throw new QubellServiceException("API: {{nickname}} - Unknown service exception", ex);
  }
  }
  {{/operation}}
}
{{/operations}}