package {{invokerPackage}};

import com.fasterxml.jackson.databind.JavaType;
import com.qubell.client.ClientConfiguration;
import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.WebResource.Builder;
import com.sun.jersey.api.client.filter.LoggingFilter;
import com.sun.jersey.core.util.Base64;

import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import java.io.IOException;
import java.security.SecureRandom;
import java.security.cert.X509Certificate;
import java.util.HashMap;
import java.util.List;
import java.util.Map;



public class ApiInvoker {
  private static ApiInvoker INSTANCE = new ApiInvoker();
  private Map<String, Client> hostMap = new HashMap<String, Client>();
  private Map<String, String> defaultHeaderMap = new HashMap<String, String>();

  public static ApiInvoker getInstance() {
    return INSTANCE;
  }
  
  public void addDefaultHeader(String key, String value) {
     defaultHeaderMap.put(key, value);
  }

  public String escapeString(String str) {
    return str;
  }

  public static Object deserialize(String json, String containerType, Class cls) throws ApiException {
    try{
      if("List".equals(containerType)) {
        JavaType typeInfo = JsonUtil.getJsonMapper().getTypeFactory().constructCollectionType(List.class, cls);
        List response = (List<?>) JsonUtil.getJsonMapper().readValue(json, typeInfo);
        return response;
      }
      else if(String.class.equals(cls)) {
        if(json != null && json.startsWith("\"") && json.endsWith("\"") && json.length() > 1)
          return json.substring(1, json.length() - 2);
        else 
          return json;
      }
      else {
        return JsonUtil.getJsonMapper().readValue(json, cls);
      }
    }
    catch (IOException e) {
      throw new ApiException(500, e.getMessage());
    }
  }

  public static String serialize(Object obj) throws ApiException {
    if (obj instanceof String) {
        return (String) obj;
    }
    try {
      if (obj != null) 
        return JsonUtil.getJsonMapper().writeValueAsString(obj);
      else 
        return null;
    }
    catch (Exception e) {
      throw new ApiException(500, e.getMessage());
    }
  }

  public String invokeAPI(String path, String method, ClientConfiguration clientConfiguration, Map<String, String> queryParams, Object body, Map<String, String> headerParams, String contentType) throws ApiException {
    Client client = getClient(clientConfiguration);

    StringBuilder b = new StringBuilder();
    
    for(String key : queryParams.keySet()) {
      String value = queryParams.get(key);
      if (value != null){
        if(b.toString().length() == 0)
          b.append("?");
        else
          b.append("&");
        b.append(escapeString(key)).append("=").append(escapeString(value));
      }
    }
    String querystring = b.toString();

    Builder builder = client.resource(clientConfiguration.getBasePath() + "/api/1" +  path + querystring).accept("application/json");
    for(String key : headerParams.keySet()) {
      builder.header(key, headerParams.get(key));
    }
    
    for(String key : defaultHeaderMap.keySet()) {
      if(!headerParams.containsKey(key)) {
        builder.header(key, defaultHeaderMap.get(key));
      }
    }

    String authorizationHeader = "Basic "
              + new String(Base64.encode(String.format("%s:%s",
              clientConfiguration.getUsername(), clientConfiguration.getPassword()).getBytes()));

    builder.header("Authorization", authorizationHeader);


    ClientResponse response = null;

    if("GET".equals(method)) {
      response = (ClientResponse) builder.get(ClientResponse.class);
    }
    else if ("POST".equals(method)) {
      if(body == null)
        response = builder.post(ClientResponse.class, serialize(body));
      else
        response = builder.type(contentType).post(ClientResponse.class, serialize(body));
    }
    else if ("PUT".equals(method)) {
      if(body == null)
        response = builder.put(ClientResponse.class, serialize(body));
      else
        response = builder.type(contentType).put(ClientResponse.class, serialize(body));
    }
    else if ("DELETE".equals(method)) {
      if(body == null)
        response = builder.delete(ClientResponse.class, serialize(body));
      else
        response = builder.type(contentType).delete(ClientResponse.class, serialize(body));
    }
    else {
      throw new ApiException(500, "unknown method type " + method);
    }
    if(response.getClientResponseStatus() == ClientResponse.Status.OK) {
      return (String) response.getEntity(String.class);
    }
    else {
      throw new ApiException(
                response.getClientResponseStatus().getStatusCode(),
                response.getEntity(String.class));      
    }
  }

  private Client getClient(ClientConfiguration clientConfiguration) {

    String basePath = clientConfiguration.getBasePath();
    if(!hostMap.containsKey(basePath)) {
      Client client = Client.create();
      if(clientConfiguration.getLogPayload()){
        client.addFilter(new LoggingFilter());
      }
      if(clientConfiguration.getBypassSSLCertificateCheck()){
        configurePassThroughSSLCheck();
      }

      hostMap.put(basePath, client);
    }
    return hostMap.get(basePath);
  }
  private void configurePassThroughSSLCheck() {
      javax.net.ssl.HttpsURLConnection.setDefaultHostnameVerifier(
              new javax.net.ssl.HostnameVerifier() {

                  public boolean verify(String hostname,
                                        javax.net.ssl.SSLSession sslSession) {
                      return true;
                  }
              });

      System.setProperty("jsse.enableSNIExtension", "false");

      TrustManager[] trustAllCerts = new TrustManager[]{new X509TrustManager(){
          public X509Certificate[] getAcceptedIssuers(){return null;}
          public void checkClientTrusted(X509Certificate[] certs, String authType){}
          public void checkServerTrusted(X509Certificate[] certs, String authType){}
      }};

      try {
          SSLContext sc = SSLContext.getInstance("TLS");

          sc.init(null, trustAllCerts, new SecureRandom());
          HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
      } catch (Exception e) {
          ;
      }
  }

}
